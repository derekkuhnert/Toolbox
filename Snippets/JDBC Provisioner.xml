<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="JDBC Provisioner" type="JDBCProvision">
  <Description>Sample rule for JDBC provisioning for Create and Disable operations.</Description>
  <Signature returnType="ProvisioningResult">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="application">
        <Description>
                The application whose data file is being processed.
                </Description>
      </Argument>
      <Argument name="schema">
        <Description>
                The Schema currently in use.
                </Description>
      </Argument>
      <Argument name="connection">
        <Description>
                A connection object to connect to database.
                </Description>
      </Argument>
      <Argument name="plan">
        <Description>
                The ProvisioningPlan created against the JDBC application.
                </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="result">
        <Description>
                A Provisioning Result object is desirable to return the status.IT can be a new object or part of  Provisioning Plan
                </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;
import sailpoint.api.SailPointContext;
import sailpoint.connector.JDBCConnector;
import sailpoint.object.Application;
import sailpoint.object.ProvisioningPlan;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AttributeRequest;
import sailpoint.object.ProvisioningPlan.PermissionRequest;
import sailpoint.object.ProvisioningResult;
import sailpoint.object.Schema;
import sailpoint.tools.xml.XMLObjectFactory;

// Helper method
public String getAttributeRequestValue(AccountRequest acctReq, String attribute) {
  if (acctReq != null) {
    AttributeRequest attrReq = acctReq.getAttributeRequest(attribute);
    if(attrReq != null) {
      return attrReq.getValue();
    }
  }
  return null;
}

ProvisioningResult result = new ProvisioningResult();

if(plan != null) {
  List accounts = plan.getAccountRequests();
  if(accounts != null) {
    for (AccountRequest account : accounts) {
      try {
        if(AccountRequest.Operation.Create.equals(account.getOperation())) {
          // Ideally we should first check to see if the account already exists.
          // As written, this just assumes it does not.
          // Below: Nice string formatting
          PreparedStatement statement = connection.prepareStatement("insert into users (id, username, firstname, lastname, email) values (?,?,?,?,?)");
          statement.setString(1, ((String) account.getNativeIdentity()));
          statement.setString(2, getAttributeRequestValue(account, "username"));
          statement.setString(3, getAttributeRequestValue(account, "firstname"));
          statement.setString(4, getAttributeRequestValue(account, "lastname"));
          statement.setString(5, getAttributeRequestValue(account, "email"));
          statement.executeUpdate();
          result.setStatus(ProvisioningResult.STATUS_COMMITTED);
        } else if(AccountRequest.Operation.Disable.equals(account.getOperation())) {
          // Probably don't want to delete the row, just set some "disabled" field, but this is for simplicity
          PreparedStatement statement = connection.prepareStatement("delete from users where id=?");
          statement.setString(1, ((String) account.getNativeIdentity()));
          statement.executeUpdate();
          result.setStatus(ProvisioningResult.STATUS_COMMITTED);
        } else {
          // Not supported. Probably want to do some sort of error handling here.
        }
      } catch(SQLException e) {
        result.setStatus(ProvisioningResult.STATUS_FAILED);
        result.addError(e);
      }
    }
  }
}

return result;</Source>
</Rule>
